# -*- coding: utf-8 -*-
"""IRF-MC-Simulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISSF1HhUHljKJ-ta4UymXd41RjUofB5O
"""

!pip install pandas numpy statsmodels arch plotly openpyxl fpdf

!pip install matplotlib

import pandas as pd
import numpy as np
from datetime import datetime
from arch import arch_model
from statsmodels.tsa.api import VAR
import matplotlib.pyplot as plt
import os
from fpdf import FPDF
from enum import Enum
from dataclasses import dataclass
import warnings
warnings.filterwarnings('ignore')

class AssetClass(Enum):
    EQUITY = 'E'
    CORPORATE_DEBT = 'C'
    GOVERNMENT_BONDS = 'G'

@dataclass
class FundMetadata:
    fund_name: str
    asset_class: AssetClass
    file_path: str

class PensionAnalytics:
    def __init__(self, fund_metadata_list, macro_file, start_date='2014-01-01', end_date='2024-12-31'):
        self.start_date = pd.to_datetime(start_date)
        self.end_date = pd.to_datetime(end_date)
        self.data = None
        self.fund_metadata_list = fund_metadata_list
        self.macro_file = macro_file
        self.fund_mapping = {}

    def load_data(self):
        dfs = []
        for metadata in self.fund_metadata_list:
            df = self._load_fund(metadata)
            dfs.append(df)
            self.fund_mapping[metadata.fund_name] = metadata.asset_class

        self.data = pd.concat(dfs, axis=1)

        macro_df = pd.read_excel(self.macro_file)
        macro_df.rename(columns={'Date': 'date', 'DATE': 'date'}, inplace=True)
        macro_df['date'] = pd.to_datetime(macro_df['date'])
        macro_df.set_index('date', inplace=True)
        macro_df = macro_df[['Inflation Rate', 'Repo Rate', 'EPU Index']]

        self.data = self.data.join(macro_df, how='inner')
        return self.data

    def _load_fund(self, metadata):
        df = pd.read_excel(metadata.file_path)
        df.rename(columns={'Date': 'date', 'DATE': 'date'}, inplace=True)
        df['date'] = pd.to_datetime(df['date'])
        df.set_index('date', inplace=True)
        df['Monthly_Return'] = df['Monthly Average NAV'].pct_change()
        df['Monthly_Volatility'] = df['Monthly Volatility (Std Dev of Returns)']

        column_prefix = f"{metadata.fund_name}_{metadata.asset_class.value}"
        df.columns = [f"{column_prefix}_{col}" for col in df.columns]
        return df

    def run_var_analysis(self):
        return_cols = [col for col in self.data.columns if "Monthly_Return" in col]
        macro_cols = ['Inflation Rate', 'Repo Rate', 'EPU Index']
        data_for_var = self.data[return_cols + macro_cols].dropna()

        n_obs = data_for_var.shape[0]
        n_vars = data_for_var.shape[1]
        max_possible_lags = (n_obs - n_vars - 1) // n_vars
        maxlags = min(12, max_possible_lags)

        if maxlags < 1:
            raise ValueError("Not enough data to perform VAR analysis.")

        model = VAR(data_for_var)
        results = model.fit(maxlags=maxlags, ic='aic')
        irf = results.irf(16)
        return irf

    def plot_impulse_response(self, irf, return_cols, output_folder="plots"):
        # Create impulse response plots with enhanced readability and save as images
        os.makedirs(output_folder, exist_ok=True)
        images = []

        for col in return_cols:
            # Generate the default IRF plot without specifying 'ax'
            fig = irf.plot(impulse='Inflation Rate', response=col)

            # Customize the plot after it has been generated
            fig.suptitle(f"Impulse Response of {col} to Inflation Shock", fontsize=16)
            for ax in fig.axes:
                ax.set_xlabel("Periods", fontsize=14)
                ax.set_ylabel("Response Magnitude", fontsize=14)
                ax.grid(True, which='both', linestyle='--', linewidth=0.5)
                ax.axhline(0, color='black', linewidth=0.6)  # Baseline for response
                ax.legend([f"Response of {col} to Inflation Rate Shock"], fontsize=12)
                ax.set_xlim(0, 16)  # Adjust x-axis limit to show 16 periods

            # Save the plot with a tight layout
            image_path = os.path.join(output_folder, f"IRF_{col}.png")
            fig.savefig(image_path, bbox_inches="tight")
            plt.close(fig)
            images.append(image_path)

        return images


    def monte_carlo_simulation(self, scenarios, n_simulations=1000, n_years=30):
        results = {}
        for scenario_name, scenario in scenarios.items():
            final_values = []
            for _ in range(n_simulations):
                corpus = 0
                for year in range(n_years):
                    returns = np.random.normal(scenario['market_return'], scenario['volatility'])
                    corpus = corpus * (1 + returns) + 10000
                final_values.append(corpus)
            results[scenario_name] = final_values
        return results

    def plot_monte_carlo_results(self, monte_carlo_results, output_folder="plots"):
        os.makedirs(output_folder, exist_ok=True)
        images = []

        plt.figure(figsize=(14, 10))
        for scenario_name, final_values in monte_carlo_results.items():
            plt.hist(final_values, bins=50, alpha=0.6, label=scenario_name, edgecolor='black')
        plt.title("Distribution of Final Portfolio Values Across Scenarios", fontsize=18)
        plt.xlabel("Final Portfolio Value (in currency)", fontsize=14)
        plt.ylabel("Frequency of Occurrence", fontsize=14)
        plt.legend(title="Scenarios", fontsize=12)
        plt.grid(True, which='both', linestyle='--', linewidth=0.5)

        image_path = os.path.join(output_folder, "monte_carlo_distribution.png")
        plt.savefig(image_path, bbox_inches="tight")
        plt.close()
        images.append(image_path)

        plt.figure(figsize=(12, 8))
        scenario_data = [results for results in monte_carlo_results.values()]
        plt.boxplot(scenario_data, labels=monte_carlo_results.keys(), notch=True, patch_artist=True,
                    boxprops=dict(facecolor="lightblue", color="black"),
                    medianprops=dict(color="red", linewidth=1.5),
                    whiskerprops=dict(color="black", linewidth=1),
                    capprops=dict(color="black", linewidth=1),
                    flierprops=dict(markerfacecolor="blue", marker="o", markersize=5, linestyle="none"))
        plt.title("Comparison of Final Portfolio Values Across Scenarios", fontsize=18)
        plt.ylabel("Final Portfolio Value (in currency)", fontsize=14)
        plt.xticks(rotation=45, fontsize=12)
        plt.grid(axis='y', linestyle='--', linewidth=0.5)

        image_path = os.path.join(output_folder, "monte_carlo_boxplot.png")
        plt.savefig(image_path, bbox_inches="tight")
        plt.close()
        images.append(image_path)

        return images

    def generate_pdf_report(self, irf_images, mc_images, filename="Pension_Analysis_Report.pdf"):
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        pdf.add_page()
        pdf.set_font("Arial", "B", 16)
        pdf.cell(200, 10, "Pension Fund Analysis Report", ln=True, align='C')

        # Add IRF Analysis Section with explanation
        pdf.set_font("Arial", "B", 12)
        pdf.cell(200, 10, "Impulse Response Function (IRF) Analysis", ln=True, align='L')
        pdf.set_font("Arial", "", 10)
        pdf.multi_cell(0, 10, "The following graphs show how each fund responds to inflation shocks over time. "
                               "A positive response indicates that the fund's returns increase with inflation, "
                               "while a negative response indicates the opposite.\n")

        for image_path in irf_images:
            pdf.add_page()
            pdf.image(image_path, x=10, y=30, w=180)

        # Add Monte Carlo Simulation Section with explanation
        pdf.add_page()
        pdf.set_font("Arial", "B", 12)
        pdf.cell(200, 10, "Monte Carlo Simulation Results", ln=True, align='L')
        pdf.set_font("Arial", "", 10)
        pdf.multi_cell(0, 10, "The following analysis shows the distribution of possible portfolio values under "
                               "different market scenarios. The simulation accounts for various market conditions "
                               "and their impact on long-term portfolio performance.\n")

        for image_path in mc_images:
            pdf.add_page()
            pdf.image(image_path, x=10, y=30, w=180)

        pdf.output(filename)

# Usage Example
if __name__ == "__main__":
    fund_metadata_list = [
        FundMetadata("HDFC_Equity", AssetClass.EQUITY, "/content/HDFC_E.xlsx"),
        FundMetadata("HDFC_Corporate_Debt", AssetClass.CORPORATE_DEBT, "/content/HDFC_C.xlsx"),
        FundMetadata("HDFC_Govt_Bonds", AssetClass.GOVERNMENT_BONDS, "/content/HDFC_G.xlsx"),
        FundMetadata("ICICI_Equity", AssetClass.EQUITY, "/content/ICICI_E.xlsx"),
        FundMetadata("ICICI_Corporate_Debt", AssetClass.CORPORATE_DEBT, "/content/ICICI_C.xlsx"),
        FundMetadata("ICICI_Govt_Bonds", AssetClass.GOVERNMENT_BONDS, "/content/ICICI_G.xlsx"),
        FundMetadata("SBI_Equity", AssetClass.EQUITY, "/content/SBI_E.xlsx"),
        FundMetadata("SBI_Corporate_Debt", AssetClass.CORPORATE_DEBT, "/content/SBI_C.xlsx"),
        FundMetadata("SBI_Govt_Bonds", AssetClass.GOVERNMENT_BONDS, "/content/SBI_G.xlsx"),
        FundMetadata("UTI_Equity", AssetClass.EQUITY, "/content/UTI_E.xlsx"),
        FundMetadata("UTI_Corporate_Debt", AssetClass.CORPORATE_DEBT, "/content/UTI_C.xlsx"),
        FundMetadata("UTI_Govt_Bonds", AssetClass.GOVERNMENT_BONDS, "/content/UTI_G.xlsx"),
        FundMetadata("LIC_Equity", AssetClass.EQUITY, "/content/LIC_E.xlsx"),
        FundMetadata("LIC_Corporate_Debt", AssetClass.CORPORATE_DEBT, "/content/LIC_C.xlsx"),
        FundMetadata("LIC_Govt_Bonds", AssetClass.GOVERNMENT_BONDS, "/content/LIC_G.xlsx"),
    ]

    # Define macroeconomic data path
    macro_file = "/content/synthetic_macro_data (1).xlsx"

    # Define Monte Carlo scenarios
    scenarios = {
        'Base': {'market_return': 0.05, 'volatility': 0.10},
        'Bull': {'market_return': 0.15, 'volatility': 0.20},
        'Bear': {'market_return': -0.05, 'volatility': 0.15},
        'Crisis': {'market_return': -0.10, 'volatility': 0.25},
    }

    # Initialize the PensionAnalytics class with fund metadata and macroeconomic data
    analytics = PensionAnalytics(fund_metadata_list, macro_file)
    analytics.load_data()

    # Run VAR analysis and plot impulse responses
    irf = analytics.run_var_analysis()
    return_cols = [col for col in analytics.data.columns
                   if any(fund_metadata.fund_name in col
                          for fund_metadata in analytics.fund_metadata_list)
                   and 'Monthly_Return' in col]

    # Generate impulse response plots
    irf_images = analytics.plot_impulse_response(irf, return_cols)

    # Run Monte Carlo simulations and generate plots
    monte_carlo_results = analytics.monte_carlo_simulation(scenarios)
    mc_images = analytics.plot_monte_carlo_results(monte_carlo_results)

    # Generate PDF report combining all IRF and Monte Carlo images
    analytics.generate_pdf_report(irf_images, mc_images, filename="Pension_Analysis_Report.pdf")

    print("Pension analysis completed successfully. Report saved as Pension_Analysis_Report.pdf.")